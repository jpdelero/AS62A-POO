// Nome: Joao Pedro Dias Elero - RA: 2706431
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Date;
import java.util.GregorianCalendar;

public class FormMotorista extends javax.swing.JFrame {
    private Motorista m = new Motorista();
    private BDMotorista bd = BDMotorista.getMotoristaUnic();
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    
    private static FormMotorista formMotoristaUnic;
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(FormMotorista.class.getName());

    /**
     * Creates new form FormMotorista
     */
    private FormMotorista() {
        initComponents();
        setLocationRelativeTo(null);
    }
    
    // MÉTODO SINGLETON
    public static FormMotorista getFormMotoristaUnic(){
        if(formMotoristaUnic == null){
            formMotoristaUnic = new FormMotorista();
        }
        return formMotoristaUnic;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelCpf = new javax.swing.JLabel();
        tfCpf = new javax.swing.JTextField();
        jLabelNome = new javax.swing.JLabel();
        tfNome = new javax.swing.JTextField();
        btSair = new javax.swing.JButton();
        btLimpar = new javax.swing.JButton();
        btInserir = new javax.swing.JButton();
        btConsultar = new javax.swing.JButton();
        btAlterar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jLabelCnh = new javax.swing.JLabel();
        tfCnh = new javax.swing.JTextField();
        jLabelData = new javax.swing.JLabel();
        tfData = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Estudante");

        jLabelCpf.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelCpf.setText("CPF:");

        jLabelNome.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelNome.setText("Nome:");

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        btLimpar.setText("Limpar");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        btInserir.setText("Inserir");
        btInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInserirActionPerformed(evt);
            }
        });

        btConsultar.setText("Consultar");
        btConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarActionPerformed(evt);
            }
        });

        btAlterar.setText("Alterar");
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });

        btExcluir.setText("Excluir");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CPF", "Nome", "CNH", "Data de admissão"
            }
        ));
        tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabela);

        jLabelCnh.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelCnh.setText("CHN:");

        tfCnh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCnhActionPerformed(evt);
            }
        });

        jLabelData.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelData.setText("Data de Admissão (dd/MM/yyyy):");

        try {
            tfData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        tfData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btLimpar)
                        .addGap(18, 18, 18)
                        .addComponent(btSair))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelNome)
                                    .addComponent(jLabelCpf)
                                    .addComponent(jLabelData)
                                    .addComponent(jLabelCnh))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfNome, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                    .addComponent(tfCpf)
                                    .addComponent(tfCnh)
                                    .addComponent(tfData)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btInserir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btConsultar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btAlterar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btExcluir)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelCpf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfCpf))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfNome))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelCnh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfCnh))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfData))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btInserir)
                    .addComponent(btConsultar)
                    .addComponent(btAlterar)
                    .addComponent(btExcluir))
                .addGap(57, 57, 57)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btSair, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btLimpar, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        sair();
    }//GEN-LAST:event_btSairActionPerformed

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        limpar();
    }//GEN-LAST:event_btLimparActionPerformed

    private void btInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInserirActionPerformed
        inserir();
        lisTab();
    }//GEN-LAST:event_btInserirActionPerformed

    private void btConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultarActionPerformed
        consultar();
    }//GEN-LAST:event_btConsultarActionPerformed

    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
        alterar();
        lisTab();
    }//GEN-LAST:event_btAlterarActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        excluir();
        lisTab();
    }//GEN-LAST:event_btExcluirActionPerformed

    private void tabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMouseClicked
        selTab();
    }//GEN-LAST:event_tabelaMouseClicked

    private void tfCnhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCnhActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCnhActionPerformed

    private void tfDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDataActionPerformed

    public void sair(){
        int resp = JOptionPane.showConfirmDialog(
                null,
                "Deseja realmente sair?",
                "Sair",
                JOptionPane.YES_NO_OPTION
        );
        if(resp == 0){
            dispose();
        }
    }
    
    public void limpar(){
        tfCpf.setText("");
        tfNome.setText("");
        tfCnh.setText("");
        tfData.setText("");
        tfCpf.requestFocus();
    }
    
    public void inserir(){
        try{
            m = new Motorista();

            m.setCpf(Integer.parseInt(tfCpf.getText()));
            m.setNome(tfNome.getText());
            m.setCnh(Integer.parseInt(tfCnh.getText()));

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            sdf.setLenient(false);

            try{
                Date data = sdf.parse(tfData.getText());
                GregorianCalendar gc = new GregorianCalendar();
                gc.setTime(data);
                m.setDataAdmissao(gc);
            }
            catch(ParseException pe){
                JOptionPane.showMessageDialog(
                    null,
                    "Data inválida! Use o formato dd/MM/yyyy.",
                    "Cadastro de Motorista - ERRO",
                    JOptionPane.ERROR_MESSAGE
                );
                tfData.requestFocus();
                return;
            }

            BDMotorista bd = BDMotorista.getMotoristaUnic();
            Motorista retorno = bd.insereMot(m);

            if(retorno != null){
                JOptionPane.showMessageDialog(
                    null,
                    "Motorista cadastrado com sucesso!",
                    "Cadastro de Motorista",
                    JOptionPane.INFORMATION_MESSAGE
                );
                limpar();
            }else{
                JOptionPane.showMessageDialog(
                    null,
                    "Já existe um motorista com esse CPF!",
                    "Cadastro de Motorista - ERRO",
                    JOptionPane.ERROR_MESSAGE
                );
                tfCpf.setText("");
                tfCpf.requestFocus();
            }

        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(
                null,
                "O CPF e CNH devem ser números inteiros!",
                "Cadastro de Motorista - ERRO",
                JOptionPane.ERROR_MESSAGE
            );
            tfCpf.setText("");
            tfCpf.requestFocus();
        }
    }
    
    public void consultar(){
        try{
            m = new Motorista();
            m.setCpf(Integer.parseInt(tfCpf.getText()));

            m = bd.consultaMot(m);

            if(m != null){
                tfCpf.setText(Integer.toString(m.getCpf()));
                tfNome.setText(m.getNome());
                tfCnh.setText(Integer.toString(m.getCnh()));

                tfData.setText(sdf.format(m.getDataAdmissao().getTime()));

                JOptionPane.showMessageDialog(
                    null,
                    "Motorista encontrado!",
                    "Consulta de Motorista",
                    JOptionPane.INFORMATION_MESSAGE
                );
                limpar();
            }
            else{
                JOptionPane.showMessageDialog(
                    null,
                    "CPF não encontrado!",
                    "Consulta de Motorista - ERRO",
                    JOptionPane.ERROR_MESSAGE
                );
                tfCpf.setText("");
                tfCpf.requestFocus();
            }
        }
        catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(
                null,
                "O CPF deve ser um número inteiro!",
                "Consulta de Motorista - ERRO",
                JOptionPane.ERROR_MESSAGE
            );
            tfCpf.setText("");
            tfCpf.requestFocus();
        }
    }

    public void alterar(){
        try{
            m = new Motorista();
            m.setCpf(Integer.parseInt(tfCpf.getText()));

            m = bd.consultaMot(m);
            if(m != null){
                String nome = JOptionPane.showInputDialog(
                    null,
                    "Informe o novo nome:",
                    "Alteração de Motorista",
                    JOptionPane.QUESTION_MESSAGE
                );
                if(nome != null && !nome.trim().isEmpty()){
                    m.setNome(nome.trim());
                }

                String cnhStr = JOptionPane.showInputDialog(
                    null,
                    "Informe a nova CNH (numérica):",
                    "Alteração de Motorista",
                    JOptionPane.QUESTION_MESSAGE
                );
                if(cnhStr != null){
                    try{
                        m.setCnh(Integer.parseInt(cnhStr.trim()));
                    }
                    catch(NumberFormatException ex){
                        JOptionPane.showMessageDialog(
                            null,
                            "A CNH deve ser um número inteiro!",
                            "Alteração de Motorista - ERRO",
                            JOptionPane.ERROR_MESSAGE
                        );
                    }
                }

                String dataStr = JOptionPane.showInputDialog(
                    null,
                    "Informe a nova data de admissão (dd/MM/yyyy):",
                    "Alteração de Motorista",
                    JOptionPane.QUESTION_MESSAGE
                );
                if(dataStr != null){
                    try{
                        sdf.setLenient(false);
                        Date d = sdf.parse(dataStr.trim());
                        GregorianCalendar gc = new GregorianCalendar();
                        gc.setTime(d);
                        m.setDataAdmissao(gc);
                    }
                    catch(ParseException ex){
                        JOptionPane.showMessageDialog(
                            null,
                            "Data inválida! Use o formato dd/MM/yyyy.",
                            "Alteração de Motorista - ERRO",
                            JOptionPane.ERROR_MESSAGE
                        );
                    }
                }

                tfCpf.setText(Integer.toString(m.getCpf()));
                tfNome.setText(m.getNome());
                tfCnh.setText(Integer.toString(m.getCnh()));
                tfData.setText(sdf.format(m.getDataAdmissao().getTime()));

                JOptionPane.showMessageDialog(
                    null,
                    "Dados alterados com sucesso!",
                    "Alteração de Motorista",
                    JOptionPane.INFORMATION_MESSAGE
                );
                limpar();
            }else{
                JOptionPane.showMessageDialog(
                    null,
                    "CPF não encontrado!",
                    "Alteração de Motorista - ERRO",
                    JOptionPane.ERROR_MESSAGE
                );
                tfCpf.setText("");
                tfCpf.requestFocus();
            }
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(
                null,
                "O CPF deve ser um número inteiro!",
                "Alteração de Motorista - ERRO",
                JOptionPane.ERROR_MESSAGE
            );
            tfCpf.setText("");
            tfCpf.requestFocus();
        }
    }
    
    public void excluir(){
        try{
            m = new Motorista();

            m.setCpf(Integer.parseInt(tfCpf.getText()));

            m = bd.excluiMot(m);

            if(m == null){
                JOptionPane.showMessageDialog(
                        null,
                        "Motorista excluída com sucesso!",
                        "Exclusão de Motorista",
                        JOptionPane.INFORMATION_MESSAGE
                );
                limpar();
            }
            else{
                JOptionPane.showMessageDialog(
                        null,
                        "CPF não encontrado!",
                        "Exclusão de Motorista - ERRO",
                        JOptionPane.ERROR_MESSAGE
                );
            }
            tfCpf.setText("");
            tfCpf.requestFocus();
        }
        catch(NumberFormatException nfe){
                JOptionPane.showMessageDialog(
                        null,
                        "O CPF deve ser um número inteiro!",
                        "Exclusão de Motorista - ERRO",
                        JOptionPane.ERROR_MESSAGE
                );
                tfCpf.setText("");
                tfCpf.requestFocus();
        }
    }
    
    public void lisTab(){
        DefaultTableModel modTab = (DefaultTableModel) tabela.getModel();
        int posLin = 0;
        modTab.setRowCount(posLin);
      
        for(Motorista m : bd.getBdMot()){
            modTab.insertRow(posLin, new Object[]{m.getCpf(), m.getNome(), m.getCnh(), m.getDataAdmissao()});
            posLin++;
        }
    }
    
    public void selTab(){
        String valLin = "";
        int posLin = tabela.getSelectedRow();
        for(int col = 0 ; col < tabela.getColumnCount() ; col++){
            valLin += tabela.getModel().getValueAt(posLin, col).toString();
        }
        JOptionPane.showMessageDialog(
                null,
                "O valor da linha é: "+ valLin,
                "Captura de tabela",
                1
        );
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new FormMotorista().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAlterar;
    private javax.swing.JButton btConsultar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btInserir;
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btSair;
    private javax.swing.JLabel jLabelCnh;
    private javax.swing.JLabel jLabelCpf;
    private javax.swing.JLabel jLabelData;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabela;
    private javax.swing.JTextField tfCnh;
    private javax.swing.JTextField tfCpf;
    private javax.swing.JFormattedTextField tfData;
    private javax.swing.JTextField tfNome;
    // End of variables declaration//GEN-END:variables
}
